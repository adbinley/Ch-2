ylab("Predictor Importance")
#plot_main <- ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
#  geom_bar(position="fill", stat="identity")+
#  scale_fill_manual(values= clrs)+
#  theme_classic(base_family = "serif", base_size = 18)+
#  theme(axis.ticks.x = element_blank(),
#        axis.text.x = element_blank())+
#  xlab("")+
#  ylab("Relative Predictor Importance")+
#  labs(fill="Land-Cover Class")
stacked_long1$lc_class <- factor(stacked_long$lc_class, levels=c("Evergreen Needleleaf Forests PLAND",
)
)
stacked_long1$lc_class <- factor(stacked_long$lc_class, levels=c("Evergreen Needleleaf Forests PLAND",
"Deciduous Needleleaf Forests PLAND",
"Deciduous Broadleaf Forests PLAND",
"Mixed Broadleaf/Needleleaf Forests PLAND",
"Open Forests PLAND",
"Woody Wetlands PLAND", #natural forest
"Forest/Cropland Mosaics PLAND",
"Herbaceous Croplands PLAND", #modified
"Sparse Forests PLAND",
"Dense Herbaceous PLAND",
"Herbaceous Wetlands PLAND"#other
))
#plot_main <- ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
#  geom_bar(position="fill", stat="identity")+
#  scale_fill_manual(values= clrs)+
#  theme_classic(base_family = "serif", base_size = 18)+
#  theme(axis.ticks.x = element_blank(),
#        axis.text.x = element_blank())+
#  xlab("")+
#  ylab("Relative Predictor Importance")+
#  labs(fill="Land-Cover Class")
stacked_long1$lc_class <- factor(stacked_long1$lc_class, levels=c("Evergreen Needleleaf Forests PLAND",
"Deciduous Needleleaf Forests PLAND",
"Deciduous Broadleaf Forests PLAND",
"Mixed Broadleaf/Needleleaf Forests PLAND",
"Open Forests PLAND",
"Woody Wetlands PLAND", #natural forest
"Forest/Cropland Mosaics PLAND",
"Herbaceous Croplands PLAND", #modified
"Sparse Forests PLAND",
"Dense Herbaceous PLAND",
"Herbaceous Wetlands PLAND"#other
))
ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
geom_bar(position="fill", stat="identity")+
#scale_fill_manual(name = "Land Cover Class",values= clrs,
#                  labels = c("Evergreen Needleleaf Forests",
#                             "Deciduous Needleleaf Forests",
#                             "Deciduous Broadleaf Forests",
#                             "Mixed Broadleaf/Needleleaf Forests",
#                             "Open Forests",
#                             "Woody Wetlands", #natural forest
#                             "Forest/Cropland Mosaics",
#                             "Herbaceous Croplands", #modified
#                             "Sparse Forests",
#                             "Dense Herbaceous",
#                             "Herbaceous Wetlands"#other
#                             ))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
xlab("")+
ylab("Predictor Importance")
ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs,
labels = c("Evergreen Needleleaf Forests",
"Deciduous Needleleaf Forests",
"Deciduous Broadleaf Forests",
"Mixed Broadleaf/Needleleaf Forests",
"Open Forests",
"Woody Wetlands", #natural forest
"Forest/Cropland Mosaics",
"Herbaceous Croplands", #modified
"Sparse Forests",
"Dense Herbaceous",
"Herbaceous Wetlands"#other
))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
xlab("")+
ylab("Predictor Importance")
ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs,
labels = c("Evergreen Needleleaf Forests",
"Deciduous Needleleaf Forests",
"Deciduous Broadleaf Forests",
"Mixed Broadleaf/Needleleaf Forests",
"Open Forests",
"Woody Wetlands", #natural forest
"Forest/Cropland Mosaics",
"Herbaceous Croplands", #modified
"Sparse Forests",
"Dense Herbaceous",
"Herbaceous Wetlands"#other
))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())+
xlab("")+
ylab("Predictor Importance")
PI <- ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs,
labels = c("Evergreen Needleleaf Forests",
"Deciduous Needleleaf Forests",
"Deciduous Broadleaf Forests",
"Mixed Broadleaf/Needleleaf Forests",
"Open Forests",
"Woody Wetlands", #natural forest
"Forest/Cropland Mosaics",
"Herbaceous Croplands", #modified
"Sparse Forests",
"Dense Herbaceous",
"Herbaceous Wetlands"#other
))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())+
xlab("")+
ylab("Predictor Importance")
png("fig_outputs/PI.png", height = 9, width = 11.5, units = "in",res=300)
PI
dev.off()
rPI <- ggplot(stacked_long3, aes(x=x, y=rPI, fill = state))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs2,
labels = c("Natural rPI", "Modified rPI"
))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
xlab("")+
ylab("Relative Predictor Importance")
rPI
plot_list <- list(PI,rPI)
ggarrange(plotlist = plot_list,
ncol=2,
widths = c(1,1))
library(ggpubr)
ggarrange(plotlist = plot_list,
ncol=2,
widths = c(1,1))
rPI <- ggplot(stacked_long3, aes(x=x, y=rPI, fill = state))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs2,
labels = c("Natural", "Modified"
))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
xlab("")+
ylab("Relative Predictor Importance")
plot_list <- list(PI,rPI)
pi_plots <- ggarrange(plotlist = plot_list,
ncol=2,
widths = c(1,1))
png("fig_outputs/pi_plots.png", height = 9, width = 11.5, units = "in",res=300)
pi_plots
dev.off()
PI <- ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs,
labels = c("Evergreen Needleleaf Forests",
"Deciduous Needleleaf Forests",
"Deciduous Broadleaf Forests",
"Mixed Broadleaf/Needleleaf Forests",
"Open Forests",
"Woody Wetlands", #natural forest
"Forest/Cropland Mosaics",
"Herbaceous Croplands", #modified
"Sparse Forests",
"Dense Herbaceous",
"Herbaceous Wetlands"#other
))+
theme_classic(base_family = "serif", base_size = 18,
legend.position = "left")+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())+
xlab("")+
ylab("Predictor Importance")
PI <- ggplot(stacked_long1, aes(x=x, y=PI, fill = lc_class))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs,
labels = c("Evergreen Needleleaf Forests",
"Deciduous Needleleaf Forests",
"Deciduous Broadleaf Forests",
"Mixed Broadleaf/Needleleaf Forests",
"Open Forests",
"Woody Wetlands", #natural forest
"Forest/Cropland Mosaics",
"Herbaceous Croplands", #modified
"Sparse Forests",
"Dense Herbaceous",
"Herbaceous Wetlands"#other
))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "left")+
xlab("")+
ylab("Predictor Importance")
PI
plot_list <- list(PI,rPI)
pi_plots <- ggarrange(plotlist = plot_list,
ncol=2,
widths = c(1,1))
png("fig_outputs/pi_plots.png", height = 9, width = 11.5, units = "in",res=300)
pi_plots
dev.off()
rPI <- ggplot(stacked_long3, aes(x=x, y=rPI, fill = state))+
geom_bar(position="fill", stat="identity")+
scale_fill_manual(name = "Land Cover Class",values= clrs2,
labels = c("Natural", "Modified"
))+
theme_classic(base_family = "serif", base_size = 18)+
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
xlab("")+
ylab("Relative Predictor Importance")+
scale_y_continuous(position = "right")
rPI
plot_list <- list(PI,rPI)
pi_plots <- ggarrange(plotlist = plot_list,
ncol=2,
widths = c(1,1))
png("fig_outputs/pi_plots.png", height = 9, width = 11.5, units = "in",res=300)
pi_plots
dev.off()
png("fig_outputs/PI.png", height = 9, width = 11.5, units = "in",res=300)
PI
dev.off()
png("fig_outputs/rPI.png", height = 9, width = 11.5, units = "in",res=300)
rPI
dev.off()
ebirdst_species <- ebirdst_runs %>%
filter(species_code == "magwar")
start <- ebirdst_species %>%
{.[["breeding_start"]]}
end <- ebirdst_species %>%
{.[["breeding_end"]]}
bre <- c(start, end)
ext <-  c(xmin = -180, xmax = 180,
ymin = -90, ymax = 90)
bre_extent <- ebirdst_extent(ext, t = bre)
run_name <- ebirdst_species$run_name
path <- "E:/eBird/data/raw/STEM/magwar-ERD2019-STATUS-20200930-3ed92d66"
pds <- load_pds(path = path)
natural <- c("mcd12q1_lccs1_fs_c11_1500_pland",
"mcd12q1_lccs1_fs_c12_1500_pland",
"mcd12q1_lccs1_fs_c13_1500_pland",
"mcd12q1_lccs1_fs_c14_1500_pland",
"mcd12q1_lccs1_fs_c15_1500_pland",
"mcd12q1_lccs1_fs_c16_1500_pland",
"mcd12q1_lccs1_fs_c21_1500_pland",
"mcd12q1_lccs3_fs_c27_1500_pland")
modified <- c("mcd12q1_lccs2_fs_c25_1500_pland",
"mcd12q1_lccs2_fs_c35_1500_pland",
"mcd12q1_lccs2_fs_c36_1500_pland",
"mcd12q1_lccs1_fs_c1_1500_pland")
natural1 <- c("Evergreen Needleleaf Forests","Evergreen Broadleaf Forests",
"Deciduous Needleleaf Forests","Deciduous Broadleaf Forests",
"Mixed Broadleaf/Needleleaf Forests",
"Mixed Broadleaf Evergreen/Deciduous Forests",
"Open Forests", "Woody Wetlands")
modified1 <- c("Forest/Cropland Mosaics",
"Natural Herbaceous/Croplands Mosaics",
"Herbaceous Croplands",
"Barren" )
lc_classes <- c(natural,modified)
lc_classes1 <- c(natural1,modified1)
pds1 <- pds %>%
filter(predictor %in% lc_classes) %>% #filtered to only our natural and modified land cover class predictors
filter(stixel_id == "63-199.6-NSSWNEEN") #filtered to highlighted stixel
pds1 <- pds %>%
filter(predictor %in% lc_classes) %>% #filtered to only our natural and modified land cover class predictors
filter(stixel_id == "70-168-NSSWEWWN") #filtered to highlighted stixel
pds2 <- pds %>%
filter(predictor %in% lc_classes)
#pd_smooth <- plot_pds(pds2, lc_classes[12], ext = bre_extent)
data <- ebirdst_subset(pds, bre_extent) %>%
filter(predictor == natural[j])
pd_plot1 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[1])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Evergreen Needleleaf Forest")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
library(ggtext)
pd_plot1 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[1])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Evergreen Needleleaf Forest")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot1
pd_plot1 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[1])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Evergreen Needleleaf Forest")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot1
pd_plot2 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[2])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Evergreen Broadleaf Forests")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot3 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[3])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Deciduous Needleleaf Forests")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot4 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[4])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Deciduous Broadleaf Forests")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot5 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[5])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Mixed Broadleaf/Needleleaf Forests")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot6 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[6])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Mixed Broadleaf Evergreen/Deciduous Forests")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot7 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[7])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Open Forests")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot8 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[8])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Woody Wetlands")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot9 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[9])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, col = "#FDC12A", se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Forest/Cropland Mosaics")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot10 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[10])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, col = "#FDC12A", se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Natural Herbaceous/Croplands Mosaics")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot11 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[11])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, col = "#FDC12A", se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Herbaceous Croplands")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot12 <- ebirdst_subset(pds2, bre_extent) %>%
filter(predictor == lc_classes[12])%>%
ggplot(aes(predictor_value,response))+
#geom_point(alpha=0.2)+
geom_smooth(method = "lm", size = 2, col = "#FDC12A", se=F)+
#geom_smooth(method = "gam", se=F, size=1, col="black", linetype="dashed")+
theme_classic(base_size = 12, base_family = "serif")+
xlab("")+ #Predictor Level
ylab("")+#Probability Occurrence
ggtitle("Barren")+
xlim(0,100)+
ylim(0,0.4)+
theme(plot.title = element_textbox_simple())
pd_plot_list <- list(pd_plot1,pd_plot2,pd_plot3,pd_plot4,
pd_plot5,pd_plot6,pd_plot7,pd_plot8,
pd_plot9,pd_plot10,pd_plot11,pd_plot12)
pd_plots <- ggarrange(plotlist = pd_plot_list,
ncol=4,
nrow = 3)
pd_plots <- annotate_figure(pd_plots,
left = "Prob. Occurrence",
bottom = "Proportion Cover")
png("fig_outputs/pd_plots.png", height = 9, width = 11.5, units = "in",res=300)
pd_plots
dev.off()
png("fig_outputs/pd_plots.png", height = 10, width = 11.5, units = "in",res=300)
pd_plots
dev.off()
theme(text = element_text())$text[ c("serif") ]
pd_plots <- annotate_figure(pd_plots,
left = "Prob. Occurrence",
bottom = "Proportion Cover")
png("fig_outputs/pd_plots.png", height = 12, width = 12, units = "in",res=300)
pd_plots
dev.off()
pd_plots <- ggarrange(plotlist = pd_plot_list,
ncol=4,
nrow = 3)
theme(text = element_text())$text[ c("serif") ]
pd_plots <- annotate_figure(pd_plots,
left = "Prob. Occurrence",
bottom = "Proportion Cover")
png("fig_outputs/pd_plots.png", height = 12, width = 12, units = "in",res=300)
pd_plots
dev.off()
