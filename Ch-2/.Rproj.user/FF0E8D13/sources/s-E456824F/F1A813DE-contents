
#Comparing eBird and the BBS: progress so far

### 1. SQL database extraction

#This is pretty straightforward, but you can see the filters I've used below. **It would be great if I could get a version of this data that also contains BCR and state/province
#information as well**, as `bbsBayes` uses this information and I've had to either add it in after the fact or edits parts of the `prepare_jags_function()` to make it run.

library(DBI)
library(RSQLite)
library(dbplyr)
library(dplyr)

# set your path to the database file here
con <- dbConnect(RSQLite::SQLite(),
"C:/Users/AllisonBinley/Desktop/ERD2018_DATA_SPECIES_EBIRD_BBS_4.db")

# setup your params
# some odd stuff about non-standard evaluation
# for the object SPECIES_NAME to be used in the dplyr filter() function
# this has to be of type sym
# but, to be used in the field_list vector, it needs to be a character
SPECIES_NAME <- sym("Hylocichla_mustelina")

effort_vars <- c("I_STATIONARY",
"YEAR",
"DAY",
"TIME",
"EFFORT_HRS",
"EFFORT_DISTANCE_KM",
"NUMBER_OBSERVERS",
"SCORE")

field_list <- c("SAMPLING_EVENT_ID", "OBSERVER_ID", "LONGITUDE", "LATITUDE", 
effort_vars, as.character(SPECIES_NAME))

# These are just example parameters
# The effort parameters are what we use in modeling

# YEAR
ERD_BEGIN_YEAR <- 2007
ERD_END_YEAR <- 2018

# DAY
DAY_BEGIN <- 148
DAY_END <- 188

# EFFORT_HRS
MAX_EFFORT_HRS <- 5

# EFFORT_DISTANCE_KM
MAX_EFFORT_DISTANCE_KM <- 5

# EFFORT_AREA_HA
# this currently approximates a square that has a hypotenuse of 10km grid cell
MAX_EFFORT_AREA_HA <- 5000

# MINIMUM START_TIME
MIN_START_TIME <- 0

# MAXIMUM START_TIME
MAX_START_TIME <- 25

# the collect call at the end of this rips all of the data into memory as a 
# data frame, so make sure you have tried to get too much data
# if you call this without the collect(), you'll get a tibble describing the 
# fields retrieved

# pull
erd <- tbl(con, "checklists") %>%
  filter(YEAR >= ERD_BEGIN_YEAR & YEAR <= ERD_END_YEAR) %>%
  filter(DAY >= DAY_BEGIN & DAY <= DAY_END) %>%
  filter(PRIMARY_CHECKLIST_FLAG == 1) %>%
  #filter(I_TRAVELING == 1 | I_STATIONARY == 1 | I_AREAL == 1) %>%
  filter(EFFORT_HRS <= MAX_EFFORT_HRS & EFFORT_HRS > 0) %>%
  filter(EFFORT_DISTANCE_KM <= MAX_EFFORT_DISTANCE_KM) %>%
  filter(EFFORT_AREA_HA <= MAX_EFFORT_AREA_HA) %>%
  filter(TIME >= MIN_START_TIME & TIME <= MAX_START_TIME) %>%
  filter(NUMBER_OBSERVERS > 0) %>%
  filter(SCORE >= 0 & SCORE <= 4) %>%
  # here's where the non-standard evaluation kicks in again
  # need to use !! before putting the SPECIES_NAME object in here
  filter(!!SPECIES_NAME >= 0) %>%
  select(field_list) %>%
  collect()

# make sure you do this when you're done
dbDisconnect(con)

#erd = 1171742 observations
#skip SQL extraction
save(erd, file = "erd0304.RData")
#load("C:/Users/AllisonBinley/OneDrive - Carleton University/eBird r code/All code full run/All code full run/erdSep30run.RData")

library(dplyr)

erd1 <- erd %>%
  filter(NUMBER_OBSERVERS == 1)

erd <- erd1

### 2. Cropping Data

#The `erd` data that was just extracted contains eBird checklists from all over the world. I wanted to crop this down to the range of Wood Thrush, and have done so roughly by cropping to the area where this species was detected within these dates. This method is not ideal because a couple of outliers broadened the range by quite a bit.
#The next method I could try is cropping to the extent of the BBS data for Wood Thrush. This may work, although if the eBird data is more extensive than the BBS (which I think is very possible) we are now losing useful data. **Are there perhaps any shapefiles available for the range of a species in their breeding range from the eBird side?** 
#Ideally we could crop the eBird data based on an eBird range map. I'm also open to other suggestions. This is a pretty minor problem, I'm just trying to find the most appropriate solution. 

library(sf)
library(raster)
library(dggridR)
library(lubridate)
library(ranger)
library(scam)
library(PresenceAbsence)
library(edarf)
library(viridis)
library(gridExtra)
library(tidyverse)
library(sp)
library(rgdal)

erd$date <- as.Date(strptime(paste(erd$YEAR,  
                                   erd$DAY), format = "%Y %j")) 

erd$observation_count <- erd$Hylocichla_mustelina

#create logical variable species_observed so we can deal with class imbalance
erd <- mutate(erd, species_observed = ifelse(erd$observation_count > 0, TRUE, FALSE))
present <- subset(erd, species_observed == TRUE)

#create spatial objects
#data to be used
erd = as.data.frame(erd) 
erd_sp <- st_as_sf(erd, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
erd_sp1 <- as(erd_sp, "Spatial")

#WOTH range
present = as.data.frame(present)
present_sp <- st_as_sf(present, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
present_sp1 <- as(present_sp, "Spatial")

#crop erd to match present, which represents the range where WOTH is found

#erd_crop <- crop(erd_sp1, present_sp1)
#plot(erd_crop, pch = 16)
#plot(present_sp, col = 5, pch = 16, add = TRUE)

#look into eBird range maps, use these instead 
#crop closer using rectangle
coords = matrix(c(-99, 29,
                  -65.5, 29,
                  -65.5, 49.5,
                  -99, 49.5,
                  -99, 29),
                ncol = 2, byrow = TRUE)

P1 = Polygon(coords)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))

#crop 
erd_crop <- crop(erd_sp1, Ps1)
plot(erd_crop, pch = 16)
plot(present_sp, col = 5, pch = 16, add = TRUE)

#change back to dataframe
erd_WOTH <- as.data.frame(erd_crop)
names(erd_WOTH)[names(erd_WOTH) == "coords.x1"] <- "LONGITUDE"
names(erd_WOTH)[names(erd_WOTH) == "coords.x2"] <- "LATITUDE"

save(erd_WOTH, file = "saved data/erd_WOTH_0318.RData")


### 3. Effort Variables

###########################################IGNORE RIGHT NOW################################################################################# 

ggplot(erd_WOTH, aes(EFFORT_HRS, Hylocichla_mustelina)) + 
geom_point() +
labs(x = "Time spent searching (hours)",
y = "No. Wood Thrush detected")

ggplot(erd_WOTH, aes(EFFORT_DISTANCE_KM, Hylocichla_mustelina)) + 
  geom_point() +
  labs(x = "Distance travelled during checklist",
       y = "No. Wood Thrush detected")

ggplot(erd_WOTH, aes(TIME, Hylocichla_mustelina)) + 
geom_point() +
labs(x = "Hours since midnight - Checklist start time",
y = "No. Wood Thrush detected")


#For now I have simply filtered out surveys that are greater than 5 hours or travel farther than 5 km 
#(based on [Johnston et al. 2019](https://www.biorxiv.org/content/10.1101/574392v1.abstract))
# this is done in the SQL extraction step
erd <- erd_WOTH %>%
  filter(EFFORT_HRS <= 5) %>%
  filter(EFFORT_DISTANCE_KM <= 5)

######################################################################################################################################################################


### 4. Filtering out BBS checklists

erd <- erd_WOTH
#erd = 623441 obs

#To remove any BBS routes input to eBird and create the "independent" dataset, I followed Ali's method below: 

library(sp)
library(sf)
library(raster)
library(rgdal)
library(dplyr)
library(tidyverse)
select <- dplyr::select

erd$date <- as.Date(strptime(paste(erd$YEAR,  
erd$DAY), format = "%Y %j")) 


# identify BBS by many 3min point counts by the same person on the same day
# also identified by several 3min point counts in the proximity

my_data <- erd

bbs_obs_date <- my_data %>%

filter(I_STATIONARY == 1) %>%

filter(EFFORT_HRS == 0.05) %>%

group_by(date, OBSERVER_ID) %>%

summarise(no_cl = n()) %>%

ungroup() %>%

filter(no_cl >= 40)


bbs_obs_date_loc <- my_data %>%

filter(paste0(date, OBSERVER_ID) %in% paste0(bbs_obs_date$date, bbs_obs_date$OBSERVER_ID))


# split by observer and date

sp <- split(bbs_obs_date_loc, list(bbs_obs_date_loc$OBSERVER_ID, bbs_obs_date_loc$date), drop = TRUE)

# --------------------------------------------------------------------

# find nearest neighbour for each point (with the same observer and date)
# also find the number of neighbours within 2 miles, 4 miles, 6 miles of
# the focal point

find_nearest_neighbour <- function(df){

locs <- df[,c("LONGITUDE", "LATITUDE")] %>%

as.matrix()

df_sf <- st_as_sf(sp::SpatialPoints(coords=locs, proj4string = CRS("+init=epsg:4326")))

dist_mat <- st_distance(x=df_sf, y=df_sf)

min_dist <- apply(dist_mat, 1, function(x){min(x[x>0])})

number_near1 <- apply(dist_mat, 1, function(x){sum((x[x>0])<3300)})

number_near2 <- apply(dist_mat, 1, function(x){sum((x[x>0])<6700)})

number_near3 <- apply(dist_mat, 1, function(x){sum((x[x>0])<10000)})

df$min_dist <- round(min_dist)

df$number_near1 <- number_near1

df$number_near2 <- number_near2

df$number_near3 <- number_near3

return(df)

}



nn <- lapply(sp, FUN=find_nearest_neighbour)

obs_date_nn <- bind_rows(nn)


# --------------------------------------------------------------------

# define which are bbs ones by min_dist and number of points within threshold


threshold1 <- 3

threshold2 <- 7

threshold3 <- 11



obs_date_nn$bbs <- ifelse(obs_date_nn$min_dist<1000 & obs_date_nn$number_near1 > (threshold1 - 1)  & obs_date_nn$number_near3 > (threshold3 - 1)  & obs_date_nn$number_near3 > (threshold3 - 1), 1, 0)



bbs <- obs_date_nn %>% filter(bbs==1)

not_bbs <- obs_date_nn %>% filter(bbs==0)

################################################################ THIS WORKS, NO NEED TO CHECK ###########################################################################


#I checked how well this method worked for my data by plotting checklists identified as BBS (red), those identified as not BBS (blue), and comparing them to shapefiles 
#of the BBS routes (black). Note that the shapefiles are from 2012, and some routes have been added, removed or changed since then. 

# load gis data for making maps
map_proj <- st_crs(4326)
ne_land <- read_sf("C:/Users/AllisonBinley/OneDrive - Carleton University/eBird r code/2. Subset eBird/BestPracdata/data/gis-data.gpkg", "ne_land") %>% 
st_transform(crs = map_proj) %>% 
st_geometry()
bcr <- read_sf("C:/Users/AllisonBinley/OneDrive - Carleton University/eBird r code/2. Subset eBird/BestPracdata/data/gis-data.gpkg", "bcr") %>% 
st_transform(crs = map_proj) %>% 
st_geometry()
ne_country_lines <- read_sf("C:/Users/AllisonBinley/OneDrive - Carleton University/eBird r code/2. Subset eBird/BestPracdata/data/gis-data.gpkg", "ne_country_lines") %>% 
st_transform(crs = map_proj) %>% 
st_geometry()
ne_state_lines <- read_sf("C:/Users/AllisonBinley/OneDrive - Carleton University/eBird r code/2. Subset eBird/BestPracdata/data/gis-data.gpkg", "ne_state_lines") %>% 
st_transform(crs = map_proj) %>% 
st_geometry()

#create spatial objects to plot
bbs_sp <- st_as_sf(bbs, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
bbs_sp1 <- as(bbs_sp, "Spatial")

#also explore not_bbs
not_bbs_sp <- st_as_sf(not_bbs, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
not_bbs_sp1 <- as(not_bbs_sp, "Spatial")

#check by adding route shapefiles
load("C:/Users/AllisonBinley/OneDrive - Carleton University/eBird r code/1. BBS filter/BBS filter/US_buffer_geo.RData")
load("C:/Users/AllisonBinley/OneDrive - Carleton University/eBird r code/1. BBS filter/BBS filter/CA_buffer_geo.RData")
US_CA_routes <- c(US_buffer, CA_buffer_2)
bbs_routes <- st_transform(US_CA_routes, crs = map_proj)

plot(bbs_sp1, col = "red", pch = 16, cex = 0.5)
plot(not_bbs_sp1, pch = 16, col = "blue", cex = 0.5, add = TRUE)
plot(ne_state_lines, add = TRUE)
plot(ne_country_lines, add = TRUE)
plot(bbs_routes, add = TRUE)

#look closer

plot(bbs_sp1, pch = 16, col = "red", cex = 0.5, xlim = c(-90, -80), ylim = c(27, 35))
plot(ne_state_lines, add = TRUE)
plot(ne_country_lines, add = TRUE)
plot(not_bbs_sp1, pch = 16, col = "blue", cex = 0.5, add = TRUE)
plot(bbs_routes, add = TRUE)

##############################################################################################################################################################################

#This step looks like it is working pretty well to me, so now we can create a new column that identifies each entry as BBS or not.

bbs_for_merge <- obs_date_nn %>%

filter(bbs==1) %>%

select(SAMPLING_EVENT_ID, bbs)

erd_all <- erd %>%

left_join(bbs_for_merge) %>%

mutate(bbs = ifelse(is.na(bbs), 0, 1))


erd_clean <- erd_all %>%
filter(bbs == 0)

nrow(erd_all)
nrow(erd_clean)
#erd_clean = 428565

#our two datasets are now erd_all and erd_clean
save(erd_all, file = "erd_all.RData")
save(erd_clean, file = "saved data/erd_clean_0318.RData")

#we are only using clean now

#######################################################################################





